{
  "openapi": "3.1.0",
  "info": {
    "title": "RustScraperApi",
    "description": "\nДата публикации: 1/14/25\n\n# RustScraper API Documentation\n\n## О проекте\n\nRustScraper API - это мощный инструмент для парсинга данных о товарах с популярных маркетплейсов. API разработано на языке Rust, что обеспечивает высокую производительность и надежность работы.\n\n## Основные возможности\n\n- Поддержка крупнейших маркетплейсов:\n  - Wildberries\n  - Ozon\n  - Яндекс.Маркет\n  - МегаМаркет\n- Гибкая система обхода блокировок через прокси-серверы\n- Поддержка пользовательских cookies для сохранения настроек сессии\n- WebSocket подключение для отслеживания статуса парсинга в реальном времени\n- Простой и понятный REST API интерфейс\n- Детальная валидация входящих данных\n- Система очередей для распределения нагрузки\n\n## Начало работы\n\n### 1. Получение тестового токена\n\nДля начала работы с API необходимо получить тестовый токен через метод `/test-token`. Тестовый токен предоставляется автоматически для уникальных IP-адресов и имеет ограниченный срок действия.\n\n### 2. Структура заказа\n\nЗаказ на парсинг состоит из трех основных компонентов:\n- Список товаров (`products`)\n- Пул прокси-серверов (`proxyPool`)\n- Пользовательские cookies (`cookies`)\n\n#### Форматы ссылок на товары\nПоддерживается два формата указания товаров:\n1. Короткий формат: `маркет/id`\n   - `wb/145700662` (Wildberries)\n   - `oz/1736756863` (Ozon)\n   - `ym/1732949807-100352880819` (Яндекс.Маркет)\n   - `mm/100065768905` (МегаМаркет)\n2. Полный URL товара с маркетплейса\n\n### 3. Отправка заказа и получение результатов\n\nПроцесс парсинга состоит из следующих шагов:\n1. Валидация заказа через метод `/valid-order`\n2. Отправка заказа методом `/order`\n3. Получение `order_hash` для отслеживания статуса\n4. Мониторинг выполнения через REST API или WebSocket\n\n## Особенности работы\n\n### Система защиты от блокировок\n\nAPI предоставляет два механизма защиты от блокировок:\n\n1. **Прокси-пул (ProxyPool)**:\n   - Позволяет распределять запросы через разные IP-адреса\n   - Поддерживает формат: `USERNAME:PASSWORD@HOST:PORT`\n   - Возможность указания нескольких прокси-серверов\n\n2. **Пользовательские Cookies**:\n   - Сохранение настроек авторизации\n   - Поддержка геолокационных настроек\n   - Сохранение пунктов выдачи заказов\n   - Персонализированные настройки отображения цен\n\n### Ограничения и лимиты\n\nКаждый токен имеет следующие ограничения:\n- Лимит на количество товаров в заказе\n- Лимит на количество одновременных обработок\n- Ограничение времени жизни токена (TTL)\n- Лимит на количество WebSocket подключений\n\n## Мониторинг выполнения\n\n### REST API мониторинг\nПолучение статуса выполнения через периодические запросы к методу `/task/{order_hash}`\n\n### WebSocket мониторинг (рекомендуется)\nУстановка постоянного соединения через `/task-ws/{order_hash}` для получения обновлений в реальном времени\n\n## Обработка ошибок\n\nAPI использует унифицированную систему кодов ошибок. Каждая ошибка содержит:\n- Текстовое описание (`error`)\n- Числовой код (`code`)\n- Информативное сообщение (`message`)\n\nПодробное описание всех возможных ошибок представлено в таблице ApiError.\n\n## ApiError\n\n| Название | Описание | Код | HTTP код |\n|----------------|-----------|-----|----------|\n| **UnknownError** | Неизвестная ошибка сервера | **0** | 500 |\n| **MissingAuthorizationHeader** | Отсутствует заголовок авторизации | **102** | 400 |\n| **MalformedAuthorizationHeader** | Неверный формат заголовка авторизации. Ожидается формат 'Bearer <token>' | **103** | 401 |\n| **InvalidAccessToken** | Предоставлен недействительный токен доступа | **104** | 401 |\n| **AccessTokenExpired** | Срок действия токена доступа истек | **105** | 401 |\n| **MissingUrlQueryParameter** | Отсутствует обязательный URL-параметр запроса | **200** | 400 |\n| **InvalidUrlQueryParameter** | Недопустимое значение URL-параметра запроса | **201** | 400 |\n| **InvalidOrderParameter** | Недопустимое значение параметра заказа | **202** | 400 |\n| **InvalidOrderFormat** | Не удалось десериализовать тело запроса в объект заказа | **203** | 400 |\n| **EmptyRequestBody** | Тело запроса пусто. Ожидается определенная структура | **204** | 400 |\n| **EmptyOrder** | Отправленный заказ пуст | **205** | 400 |\n| **QueueOverflow** | Очередь обработчика заполнена. Достигнуто максимальное количество задач | **300** | 409 |\n| **ProductLimitExceeded** | Заказ превышает максимальный лимит продуктов | **301** | 409 |\n| **ConcurrencyLimitExceeded** | Токен превысил лимит одновременной обработки | **302** | 409 |\n| **DuplicateTask** | Задача с указанным order_hash уже существует | **303** | 409 |\n| **WebSocketLimitExceeded** | Невозможно установить новое WebSocket-соединение, </br>так как сервер достиг максимального лимита одновременных подключений | **304** | 409 |\n| **AccessRestricted** | Доступ к методу ограничен | **305** | 409 |\n| **TokenDoesNotExist** | Токен не существует | **400** | 404 |\n| **TaskNotFound** | Задача с указанным order_hash не существует | **401** | 404 |\n| **PathNotFound** | Запрошенный путь не найден | **404** | 404 |\n| **TaskSendFailure** | Не удалось отправить задачу обработчику | **500** | 500 |\n| **ReqwestSessionError** | Ошибка сессии запроса | **501** | 500 |\n| **DatabaseError** | Сбой транзакции базы данных | **502** | 500 |\n| **SerializationError** | Не удалось сериализовать объект | **503** | 500 |\n</br>\n",
    "contact": {
      "name": "Nikita",
      "url": "https://t.me/Nikita5612"
    },
    "license": {
      "name": ""
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://rustscraper",
      "description": "Remote API"
    },
    {
      "url": "https://rustscraper",
      "description": "Remote API HTTPS"
    },
    {
      "url": "http://localhost:5050",
      "description": "Local server for testing"
    }
  ],
  "paths": {
    "/api/v1/config": {
      "get": {
        "tags": [
          "utilities"
        ],
        "description": "\n### GET /config\nМетод получения текущей конфигурации API. Возвращает актуальные настройки и параметры работы API-сервера.\n\n```python\nimport requests\n\nresponse = requests.get(\"http://domain/api/v1/config\")\nconfig_data = response.json()\nprint(config_data)  # Конфигурация API\n```\n",
        "operationId": "config",
        "responses": {
          "200": {
            "description": "Конфигурация API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Config"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/markets": {
      "get": {
        "tags": [
          "utilities"
        ],
        "description": "\n### GET /markets\nМетод получения информации о доступных маркетплейсах в системе.\nВозвращает список поддерживаемых маркетплейсов и их параметров в формате JSON.\n\n```python\nimport requests\n\nresponse = requests.get(\"http://domain/api/v1/markets\")\nmarkets_data = response.json()\nprint(markets_data)  # Список доступных маркетплейсов\n```\n",
        "operationId": "markets",
        "responses": {
          "200": {
            "description": "Доступные маркетплейсы",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/Market"
                  },
                  "propertyNames": {
                    "type": "string"
                  }
                },
                "example": {
                  "mm": {
                    "available": true,
                    "name": "MegaMarket",
                    "url": "https://megamarket.ru/"
                  },
                  "oz": {
                    "available": true,
                    "name": "Ozon",
                    "url": "https://ozon.ru"
                  },
                  "wb": {
                    "available": true,
                    "name": "Wildberries",
                    "url": "https://www.wildberries.ru/"
                  },
                  "ym": {
                    "available": true,
                    "name": "YandexMarket",
                    "url": "https://market.yandex.ru/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/myip": {
      "get": {
        "tags": [
          "utilities"
        ],
        "description": "\n### GET /myip\nМетод для определения IP-адреса клиента. Возвращает текущий IP-адрес в формате SocketAddr (IP:PORT),\nс которого производится обращение к API.\n",
        "operationId": "myip",
        "responses": {
          "200": {
            "description": "SocketAddr",
            "content": {
              "text/plain": {}
            }
          }
        }
      }
    },
    "/api/v1/openapi.json": {
      "get": {
        "tags": [
          "utilities"
        ],
        "description": "\n### GET /openapi.json\nМетод для получения openapi.json - это файл, содержащий спецификацию API, написанную в формате OpenAPI. Этот файл описывает, как взаимодействовать с API, включая его конечные точки (endpoints), параметры, схемы данных, методы запросов, ответы и другие детали.\n\nДля работы с API спецификациями в формате OpenAPI используйте [Swagger Editor](https://editor.swagger.io/).\n\n*Инструменты для работы с openapi.json:*\n- Swagger UI: визуализирует спецификацию в виде интерактивной документации.\n- Postman: импортирует файл для упрощенного тестирования API.\n- OpenAPI Generator: генерирует клиентские или серверные библиотеки на основе спецификации.\n",
        "operationId": "openapi",
        "responses": {
          "200": {
            "description": "openapi.json",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/v1/order": {
      "post": {
        "tags": [
          "order"
        ],
        "description": "\n### POST /order\nМетод создания нового заказа в системе.\n\n**Описание:**\nПозволяет отправить заказ на обработку с указанием списка товаров и настроек прокси-серверов.\n\n**Формат данных:**\n- В параметре products можно указывать как прямые ссылки на товары, так и короткий формат \"маркет/товар\"\n- Поддерживаемые форматы ссылок:\n  - oz/1736756863\n  - wb/145700662\n  - ym/1732949807-100352880819-181725190\n  - mm/100065768905\n  - Полные URL маркетплейсов\n\n* Рекомендуется использовать короткий вариант записи. Получить короткий вариант записи ссылок можно методом /valid-order.\n\n* В большинстве случаев короткий вариант записи состоит из символа маркетплейса и ID (SKU) товара, но для некоторых маркетплейсов вторая часть может иметь другой формат записи.\n\n* Информацию по доступным маркетплейсам и их символы можно получить используя метод /markets\n\n**Параметры прокси:**\n- Формат записи: USERNAME:PASSWORD@HOST:PORT\n- Можно указать несколько прокси-серверов\n\n**Особенности:**\n- При успешной обработке возвращается order_hash\n- order_hash используется для отслеживания статуса выполнения заказа\n- Заказ проходит валидацию\n- Количество товаров ограничено лимитом токена\n- Использование proxyPool и cookies для обхода блокировок\n\n**Заголовок запроса:**\n- Authorization: Bearer <YOUR-TOKEN>\n\n```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer your-token-here\"\n}\n\norder_data = {\n    \"products\": [\n        \"oz/1596079870\",\n        \"wb/300365052\",\n        \"ym/1732949807-100352880819-5997015\",\n        \"mm/100028286032\",\n        \"https://www.wildberries.ru/catalog/95979396/detail.aspx\",\n    ],\n    \"proxyPool\": [],\n    \"cookies\": []\n}\n\nresponse = requests.post(\"http://domain/api/v1/order\", json=order_data, headers=headers)\norder_hash = response.text\nprint(f\"Order hash: {order_hash}\")\n```\n",
        "operationId": "order",
        "requestBody": {
          "description": "Заказ на парсинг",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              },
              "example": {
                "cookies": [],
                "products": [
                  "oz/1596079870",
                  "wb/300365052",
                  "ym/1732949807-100352880819-5997015",
                  "mm/100028286032",
                  "https://www.ozon.ru/product/nozhnitsy-kantselyarskie-21-sm-calligrata-nerzhaveyushchaya-stal-plastik-173091046/",
                  "https://www.wildberries.ru/catalog/95979396/detail.aspx",
                  "https://market.yandex.ru/product--igrovaia-pristavka-sony-playstation-5-slim-digital-edition-bez-diskovoda-1000-gb-ssd-2-geimpada-bez-igr-belyi/925519649?sku=103706885579&uniqueId=162025048",
                  "https://megamarket.ru/catalog/details/nabor-instrumentov-v-keyse-108-predmetov-100065768905/"
                ],
                "proxy_pool": []
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "order_hash по которому можно получить статус выполнения задачи",
            "content": {
              "text/plain": {
                "example": "1a986959ef3b7fff2a16d774d3c56a9624d19d1d"
              }
            }
          },
          "400": {
            "description": "\n### Ошибка ApiError\n\nЗначения ошибок смотреть в таблице ApiError\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 0,
                  "error": "Unknown",
                  "message": "Unknown server error."
                }
              }
            }
          }
        },
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/api/v1/state": {
      "get": {
        "tags": [
          "utilities"
        ],
        "description": "\n### GET /state\nМетод получения текущего состояния API-сервера. Возвращает информацию о:\n- Количестве активных обработчиков\n- Лимите очереди задач (суммарный лимит для всех обработчиков)\n- Текущем количестве задач в очереди\n- Лимите открытых WebSocket соединений\n- Текущем количестве открытых WebSocket соединений\n\n```python\nimport requests\n\nresponse = requests.get(\"http://domain/api/v1/state\")\nstate_data = response.json()\nprint(state_data)  # Состояние API\n```\n",
        "operationId": "state",
        "responses": {
          "200": {
            "description": "Состояние API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiState"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/task-ws/{order_hash}": {
      "get": {
        "tags": [
          "order"
        ],
        "description": "\n### ANY /task-ws/{order_hash}\nМетод установки WebSocket-соединения для получения обновлений о состоянии задачи в реальном времени.\n\n**Описание:**\nПозволяет установить постоянное соединение для мониторинга статуса выполнения заказа.\nWebSocket проверяет статус выполнения задачи и отправляет её клиенту в случае изменения статуса.\n\n**Параметры пути:**\n- order_hash: Уникальный идентификатор заказа (получается после отправки заказа методом /order)\n\n**Особенности:**\n- Использует протокол \"send-only\"\n- Количество одновременных соединений ограничено\n- Требует авторизации\n- Автоматически закрывается после завершения задачи\n\n**Заголовок запроса:**\n- Authorization: Bearer <YOUR-TOKEN>\n\n```python\nfrom websockets.sync.client import connect\n\norder_hash = \"your-order-hash\"\nheaders = {\n    \"Authorization\": f\"Bearer {TOKEN}\"\n}\n\nwith connect(f\"ws://domain/api/v1/task-ws/{order_hash}\", additional_headers=headers) as task-ws:\n    try:\n        while (task := task-ws.recv()):\n            print(task)\n    except Exception as e:\n        print(\"Connection closed...\")\n```\n",
        "operationId": "task_ws",
        "parameters": [
          {
            "name": "order_hash",
            "in": "path",
            "description": "order_hash заказа",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статус задачи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                },
                "example": {
                  "createdAt": 1736857399,
                  "progress": [
                    3,
                    3
                  ],
                  "queueNum": 0,
                  "result": {
                    "data": {
                      "oz/1596079870": {
                        "brand": "Xiaomi",
                        "cprice": 23750,
                        "img": "https://cdn1.ozone.ru/s3/multimedia-1-1/7046147689.jpg",
                        "name": "Xiaomi Телевизор TV A 43\" FHD 2025 43\" Full HD, черный",
                        "price": 23990,
                        "rating": 4.8,
                        "reviews": 3307,
                        "seller": "Ozon Express",
                        "sellerId": "supermarket-25000",
                        "sku": "1596079870",
                        "url": "https://www.ozon.ru/product/1596079870"
                      },
                      "oz/1793879666": {
                        "cprice": 22053,
                        "img": "https://cdn1.ozone.ru/s3/multimedia-1-s/7262525512.jpg",
                        "name": "Poco Смартфон POCO X7 Global 8/256 ГБ, черный",
                        "price": 23147,
                        "rating": 0.0,
                        "reviews": 0,
                        "seller": "FG Store",
                        "sellerId": "1076935",
                        "sku": "1793879666",
                        "url": "https://www.ozon.ru/product/1793879666"
                      },
                      "wb/145700662": {
                        "brand": "ARIC",
                        "cprice": 481,
                        "name": "Гель для стирки 5 литров для белого и цветного белья",
                        "price": 491,
                        "rating": 4.9,
                        "reviews": 150228,
                        "seller": "ARIС Официальный магазин",
                        "sellerId": "1124859",
                        "sku": "145700662",
                        "url": "https://www.wildberries.ru/catalog/145700662/detail.aspx"
                      }
                    }
                  },
                  "status": "completed"
                }
              }
            }
          },
          "400": {
            "description": "\n### Ошибка ApiError\n\nЗначения ошибок смотреть в таблице ApiError\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 0,
                  "error": "Unknown",
                  "message": "Unknown server error."
                }
              }
            }
          }
        },
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/api/v1/task/{order_hash}": {
      "get": {
        "tags": [
          "order"
        ],
        "description": "\n### GET /task/{order_hash}\nМетод получения информации о состоянии задачи по её order_hash.\n\n**Параметры пути:**\n- order_hash: Уникальный идентификатор заказа (получается после отправки заказа методом /order)\n\n**Заголовок запроса:**\n- Authorization: Bearer <YOUR-TOKEN>\n\n```python\nimport requests\nimport time\n\nheaders = {\n    \"Authorization\": \"Bearer your-token-here\"\n}\n\norder_hash = \"your-order-hash\"\nresponse = requests.get(f\"http://domain/api/v1/task/{order_hash}\", headers=headers)\ntask = response.json()\n\n# Ожидание завершения задачи\nwhile task[\"status\"] in (\"waiting\", \"processing\"):\n    response = requests.get(f\"http://domain/api/v1/task/{order_hash}\", headers=headers)\n    task = response.json()\n    print(task)\n    time.sleep(1)\n```\n\nДля отслеживания выполнения задачи рекомендуется использовать подключение через WebSocket.\n",
        "operationId": "task",
        "parameters": [
          {
            "name": "order_hash",
            "in": "path",
            "description": "order_hash заказа",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Статус задачи",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                },
                "example": {
                  "createdAt": 1736857399,
                  "progress": [
                    3,
                    3
                  ],
                  "queueNum": 0,
                  "result": {
                    "data": {
                      "oz/1596079870": {
                        "brand": "Xiaomi",
                        "cprice": 23750,
                        "img": "https://cdn1.ozone.ru/s3/multimedia-1-1/7046147689.jpg",
                        "name": "Xiaomi Телевизор TV A 43\" FHD 2025 43\" Full HD, черный",
                        "price": 23990,
                        "rating": 4.8,
                        "reviews": 3307,
                        "seller": "Ozon Express",
                        "sellerId": "supermarket-25000",
                        "sku": "1596079870",
                        "url": "https://www.ozon.ru/product/1596079870"
                      },
                      "oz/1793879666": {
                        "cprice": 22053,
                        "img": "https://cdn1.ozone.ru/s3/multimedia-1-s/7262525512.jpg",
                        "name": "Poco Смартфон POCO X7 Global 8/256 ГБ, черный",
                        "price": 23147,
                        "rating": 0.0,
                        "reviews": 0,
                        "seller": "FG Store",
                        "sellerId": "1076935",
                        "sku": "1793879666",
                        "url": "https://www.ozon.ru/product/1793879666"
                      },
                      "wb/145700662": {
                        "brand": "ARIC",
                        "cprice": 481,
                        "name": "Гель для стирки 5 литров для белого и цветного белья",
                        "price": 491,
                        "rating": 4.9,
                        "reviews": 150228,
                        "seller": "ARIС Официальный магазин",
                        "sellerId": "1124859",
                        "sku": "145700662",
                        "url": "https://www.wildberries.ru/catalog/145700662/detail.aspx"
                      }
                    }
                  },
                  "status": "completed"
                }
              }
            }
          },
          "400": {
            "description": "\n### Ошибка ApiError\n\nЗначения ошибок смотреть в таблице ApiError\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 0,
                  "error": "Unknown",
                  "message": "Unknown server error."
                }
              }
            }
          }
        },
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/api/v1/test-token": {
      "get": {
        "tags": [
          "token"
        ],
        "description": "\n### GET /test-token\nМетод для получения временного тестового токена доступа к API.\nПозволяет получить ограниченный по времени токен для тестирования функциональности API.\n\n**Ограничения:**\n- Доступно только для уникальных IP-адресов\n- Токен имеет ограниченный срок действия\n- Может иметь ограниченный функционал\n\n**Параметры токена:**\n- **id** - Строка токена для передачи в заголовок запроса\n- **createdAt** - Дата и время создания токена в формате timestamp\n- **ttl** - Время жизни токена в секундах\n- **orderProductsLimit** - Лимит токена на количество товаров в заказе\n- **taskCountLimit** - Лимит токена на количество параллельных обработок заказа\n\n```python\nimport requests\n\nresponse = requests.get(\"http://domain/api/v1/test-token\")\ntoken_data = response.json()\nprint(token_data)  # Информация о тестовом токене\n```\n",
        "operationId": "test_token",
        "responses": {
          "200": {
            "description": "Параметры тестового токена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                },
                "example": {
                  "createdAt": 1736866893,
                  "id": "rs.voHvMvpmoFgakFbd7U2VMyTYh",
                  "orderProductsLimit": 40,
                  "taskCountLimit": 1,
                  "ttl": 86400
                }
              }
            }
          },
          "400": {
            "description": "\n### Ошибка ApiError\n\nЗначения ошибок смотреть в таблице ApiError\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 0,
                  "error": "Unknown",
                  "message": "Unknown server error."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/token-info": {
      "get": {
        "tags": [
          "token"
        ],
        "description": "\n### GET /token-info\n\nМетод для получения информации о текущем токене авторизации. Требует наличия валидного токена в заголовке запроса.\n\n**Заголовок запроса:**\n- Authorization: Bearer <YOUR-TOKEN>\n\n**Параметры токена:**\n- **id** - Строка токена для передачи в заголовок запроса\n- **createdAt** - Дата и время создания токена в формате timestamp\n- **ttl** - Время жизни токена в секундах\n- **orderProductsLimit** - Лимит токена на количество товаров в заказе\n- **taskCountLimit** - Лимит токена на количество параллельных обработок заказа\n\n```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer your-token-here\"\n}\n\nresponse = requests.get(\"http://domain/api/v1/token-info\", headers=headers)\nprint(response.json())\n```\n",
        "operationId": "token_info",
        "responses": {
          "200": {
            "description": "Параметры токена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                },
                "example": {
                  "createdAt": 1736866893,
                  "id": "rs.voHvMvpmoFgakFbd7U2VMyTYh",
                  "orderProductsLimit": 40,
                  "taskCountLimit": 1,
                  "ttl": 86400
                }
              }
            }
          },
          "400": {
            "description": "\n### Ошибка ApiError\n\nЗначения ошибок смотреть в таблице ApiError\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 0,
                  "error": "Unknown",
                  "message": "Unknown server error."
                }
              }
            }
          }
        },
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/api/v1/token-info/{token_id}": {
      "get": {
        "tags": [
          "token"
        ],
        "description": "\n### GET /token-info/{token_id}\n\nМетод для получения информации о конкретном токене по его идентификатору.\nПозволяет получить детальную информацию о любом токене в системе.\n\nТот же функционал, что и */token-info*, только токен передается в пути запроса */{token_id}*\n\n**Параметры токена:**\n- **id** - Строка токена для передачи в заголовок запроса\n- **createdAt** - Дата и время создания токена в формате timestamp\n- **ttl** - Время жизни токена в секундах\n- **orderProductsLimit** - Лимит токена на количество товаров в заказе\n- **taskCountLimit** - Лимит токена на количество параллельных обработок заказа\n\n**Пример:**\n- /token-info/rs.qWzZgfMjXUhrwgZWn4uZRT9VK\n\n```python\nimport requests\n\ntoken_id = \"rs.qWzZgfMjXUhrwgZWn4uZRT9VK\"\nresponse = requests.get(f\"http://domain/api/v1/token-info/{token_id}\")\nprint(response.json())\n```\n",
        "operationId": "token_info_",
        "parameters": [
          {
            "name": "token_id",
            "in": "path",
            "description": "Параметр id токена",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Параметры токена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                },
                "example": {
                  "createdAt": 1736866893,
                  "id": "rs.voHvMvpmoFgakFbd7U2VMyTYh",
                  "orderProductsLimit": 40,
                  "taskCountLimit": 1,
                  "ttl": 86400
                }
              }
            }
          },
          "400": {
            "description": "\n### Ошибка ApiError\n\nЗначения ошибок смотреть в таблице ApiError\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 0,
                  "error": "Unknown",
                  "message": "Unknown server error."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/valid-order": {
      "post": {
        "tags": [
          "order"
        ],
        "description": "\n### GET POST /valid-order\nМетод валидации данных заказа перед его отправкой.\n\n**Описание:**\nПозволяет проверить корректность данных заказа без его фактического создания в системе.\n\n**Особенности:**\n- Проверяет структуру и формат данных заказа\n- Не требует авторизации\n- Может изменять структуру заказа\n- Возвращает провалидированный заказ\n\n**Заголовок запроса:**\n- Authorization: Bearer <YOUR-TOKEN>\n\n```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer your-token-here\"\n}\norder_data = {\n    \"products\": [\n        \"oz/1736756863\",\n        \"wb/145700662\"\n    ],\n    \"proxyPool\": [\n        \"user1:pass1@host1:port1\"\n    ],\n    \"cookies\": []\n}\n\nresponse = requests.get(\"http://domain/api/v1/valid-order\", headers=headers, json=order_data)\nvalidated_order = response.json()\nprint(validated_order)\n```\n",
        "operationId": "valid_order",
        "requestBody": {
          "description": "Заказ до валидации",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              },
              "example": {
                "cookies": [],
                "products": [
                  "oz/1596079870",
                  "wb/300365052",
                  "ym/1732949807-100352880819-5997015",
                  "mm/100028286032",
                  "https://www.ozon.ru/product/nozhnitsy-kantselyarskie-21-sm-calligrata-nerzhaveyushchaya-stal-plastik-173091046/",
                  "https://www.wildberries.ru/catalog/95979396/detail.aspx",
                  "https://market.yandex.ru/product--igrovaia-pristavka-sony-playstation-5-slim-digital-edition-bez-diskovoda-1000-gb-ssd-2-geimpada-bez-igr-belyi/925519649?sku=103706885579&uniqueId=162025048",
                  "https://megamarket.ru/catalog/details/nabor-instrumentov-v-keyse-108-predmetov-100065768905/"
                ],
                "proxyPool": []
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Заказ после валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "cookies": [],
                  "products": [
                    "oz/1596079870",
                    "wb/300365052",
                    "ym/1732949807-100352880819-5997015",
                    "mm/100028286032",
                    "oz/173091046",
                    "wb/95979396",
                    "ym/925519649-103706885579-162025048",
                    "mm/100065768905"
                  ],
                  "proxyPool": []
                }
              }
            }
          },
          "400": {
            "description": "\n### Ошибка ApiError\n\nЗначения ошибок смотреть в таблице ApiError\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "example": {
                  "code": 0,
                  "error": "Unknown",
                  "message": "Unknown server error."
                }
              }
            }
          }
        },
        "security": [
          {
            "Token": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Api": {
        "type": "object",
        "required": [
          "assets_path",
          "db_path",
          "db_max_conn",
          "handlers_count",
          "handler_queue_limit",
          "task_ws_sending_interval",
          "open_ws_limit",
          "test_token",
          "interrupt_check_step",
          "available_markets"
        ],
        "properties": {
          "assets_path": {
            "type": "string"
          },
          "available_markets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "db_max_conn": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "db_path": {
            "type": "string"
          },
          "handler_queue_limit": {
            "type": "integer",
            "minimum": 0
          },
          "handlers_count": {
            "type": "integer",
            "minimum": 0
          },
          "interrupt_check_step": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "open_ws_limit": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "task_ws_sending_interval": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "test_token": {
            "$ref": "#/components/schemas/TestToken"
          }
        }
      },
      "ApiError": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "UnknownError"
            ]
          },
          {
            "type": "string",
            "enum": [
              "InvalidMasterToken"
            ]
          },
          {
            "type": "string",
            "enum": [
              "MissingAuthorizationHeader"
            ]
          },
          {
            "type": "string",
            "enum": [
              "MalformedAuthorizationHeader"
            ]
          },
          {
            "type": "string",
            "enum": [
              "InvalidAccessToken"
            ]
          },
          {
            "type": "string",
            "enum": [
              "AccessTokenExpired"
            ]
          },
          {
            "type": "object",
            "required": [
              "MissingUrlQueryParameter"
            ],
            "properties": {
              "MissingUrlQueryParameter": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "InvalidUrlQueryParameter"
            ],
            "properties": {
              "InvalidUrlQueryParameter": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "InvalidOrderParameter"
            ],
            "properties": {
              "InvalidOrderParameter": {
                "type": "string"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "InvalidOrderFormat"
            ]
          },
          {
            "type": "object",
            "required": [
              "EmptyRequestBody"
            ],
            "properties": {
              "EmptyRequestBody": {
                "type": "string"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "EmptyOrder"
            ]
          },
          {
            "type": "object",
            "required": [
              "QueueOverflow"
            ],
            "properties": {
              "QueueOverflow": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ProductLimitExceeded"
            ],
            "properties": {
              "ProductLimitExceeded": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ConcurrencyLimitExceeded"
            ],
            "properties": {
              "ConcurrencyLimitExceeded": {
                "type": "integer",
                "format": "int64",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "DuplicateTask"
            ],
            "properties": {
              "DuplicateTask": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "WebSocketLimitExceeded"
            ],
            "properties": {
              "WebSocketLimitExceeded": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "AccessRestricted"
            ]
          },
          {
            "type": "string",
            "enum": [
              "TokenDoesNotExist"
            ]
          },
          {
            "type": "string",
            "enum": [
              "TaskNotFound"
            ]
          },
          {
            "type": "string",
            "enum": [
              "PathNotFound"
            ]
          },
          {
            "type": "string",
            "enum": [
              "TaskSendFailure"
            ]
          },
          {
            "type": "object",
            "required": [
              "ReqwestSessionError"
            ],
            "properties": {
              "ReqwestSessionError": {
                "type": "string"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "DatabaseError"
            ]
          },
          {
            "type": "string",
            "enum": [
              "SerializationError"
            ]
          }
        ]
      },
      "ApiState": {
        "type": "object",
        "description": "Состояние API",
        "required": [
          "handlersCount",
          "tasksQueueLimit",
          "currTaskQueue",
          "openWsLimit",
          "currOpenWs"
        ],
        "properties": {
          "currOpenWs": {
            "type": "integer",
            "format": "int32",
            "description": "Открыто WebSockets на данный момент",
            "minimum": 0
          },
          "currTaskQueue": {
            "type": "integer",
            "description": "Текущая загруженность очереди",
            "minimum": 0
          },
          "handlersCount": {
            "type": "integer",
            "description": "Количество параллельных обработчиков",
            "minimum": 0
          },
          "openWsLimit": {
            "type": "integer",
            "format": "int32",
            "description": "Лимит на количество открытых WebSockets",
            "minimum": 0
          },
          "tasksQueueLimit": {
            "type": "integer",
            "description": "Лимит очереди задач для всех обработчиков",
            "minimum": 0
          }
        }
      },
      "Browser": {
        "type": "object",
        "required": [
          "users_temp_data_dir",
          "args",
          "headless_mod",
          "sandbox",
          "extensions",
          "incognito",
          "launch_timeout",
          "request_timeout",
          "cache_enabled",
          "timings",
          "page_param"
        ],
        "properties": {
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cache_enabled": {
            "type": "boolean"
          },
          "executable": {
            "type": [
              "string",
              "null"
            ]
          },
          "extensions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headless_mod": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "incognito": {
            "type": "boolean"
          },
          "launch_timeout": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "page_param": {
            "$ref": "#/components/schemas/BrowserPageParam"
          },
          "request_timeout": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "sandbox": {
            "type": "boolean"
          },
          "timings": {
            "$ref": "#/components/schemas/DeBrowserTimings"
          },
          "users_temp_data_dir": {
            "type": "string"
          }
        }
      },
      "BrowserPageParam": {
        "type": "object",
        "required": [
          "rand_user_agent",
          "wait_for_element_timeout"
        ],
        "properties": {
          "rand_user_agent": {
            "type": "boolean"
          },
          "symbol": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SymbolPageParam"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "wait_for_element_timeout": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "Config": {
        "type": "object",
        "required": [
          "server",
          "api",
          "browser",
          "req_session"
        ],
        "properties": {
          "api": {
            "$ref": "#/components/schemas/Api"
          },
          "browser": {
            "$ref": "#/components/schemas/Browser"
          },
          "pub_env": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "req_session": {
            "$ref": "#/components/schemas/ReqSession"
          },
          "server": {
            "$ref": "#/components/schemas/Server"
          }
        }
      },
      "DeBrowserTimings": {
        "type": "object",
        "required": [
          "launch_sleep",
          "set_proxy_sleep",
          "action_sleep",
          "page_goto_timeout"
        ],
        "properties": {
          "action_sleep": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "launch_sleep": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "page_goto_timeout": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "set_proxy_sleep": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "Market": {
        "type": "object",
        "required": [
          "name",
          "url",
          "available"
        ],
        "properties": {
          "available": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCookieParam"
            },
            "default": []
          },
          "products": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "proxyPool": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      "OrderCookieParam": {
        "type": "object",
        "required": [
          "name",
          "value",
          "url"
        ],
        "properties": {
          "domain": {
            "type": [
              "string",
              "null"
            ]
          },
          "httpOnly": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": [
              "string",
              "null"
            ]
          },
          "sameSite": {
            "type": [
              "string",
              "null"
            ]
          },
          "secure": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "url": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ReqSession": {
        "type": "object",
        "required": [
          "set_proxy_interval",
          "close_tabs_interval",
          "launch_sleep",
          "timings"
        ],
        "properties": {
          "close_tabs_interval": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "launch_sleep": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "set_proxy_interval": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "timings": {
            "$ref": "#/components/schemas/ReqTimings"
          }
        }
      },
      "ReqTimings": {
        "type": "object",
        "required": [
          "timeout",
          "conn_timeout",
          "read_timeout"
        ],
        "properties": {
          "conn_timeout": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "read_timeout": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "timeout": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "Server": {
        "type": "object",
        "required": [
          "host",
          "port"
        ],
        "properties": {
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "SymbolPageParam": {
        "type": "object",
        "properties": {
          "wait_for_product_element": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "Task": {
        "type": "object",
        "required": [
          "queueNum",
          "status",
          "createdAt"
        ],
        "properties": {
          "createdAt": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "progress": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TaskProgress"
              }
            ]
          },
          "queueNum": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "result": {},
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          }
        }
      },
      "TaskProgress": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "maxItems": 2,
        "minItems": 2
      },
      "TaskStatus": {
        "type": "string",
        "enum": [
          "waiting",
          "processing",
          "completed",
          "interrupted",
          "error"
        ]
      },
      "TestToken": {
        "type": "object",
        "required": [
          "ttl",
          "op_limit",
          "tc_limit"
        ],
        "properties": {
          "op_limit": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "tc_limit": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "ttl": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "Token": {
        "type": "object",
        "description": "Параметры токена",
        "required": [
          "id",
          "createdAt",
          "ttl",
          "orderProductsLimit",
          "taskCountLimit"
        ],
        "properties": {
          "createdAt": {
            "type": "integer",
            "format": "int64",
            "description": "Дата и время создания токена в timestamp",
            "minimum": 0
          },
          "id": {
            "type": "string"
          },
          "orderProductsLimit": {
            "type": "integer",
            "format": "int64",
            "description": "Лимит токена на количество товаров в заказе",
            "minimum": 0
          },
          "taskCountLimit": {
            "type": "integer",
            "format": "int64",
            "description": "Лимит токена на количество параллельных обработок заказа",
            "minimum": 0
          },
          "ttl": {
            "type": "integer",
            "format": "int64",
            "description": "Время жизни токена в секундах",
            "minimum": 0
          }
        }
      }
    },
    "securitySchemes": {
      "Token": {
        "type": "http",
        "scheme": "bearer",
        "description": "Token предоставляет доступ к приватным api методам. Пример токена: rs.qWzZgfMjXUhrwgZWn4uZRT9VK"
      }
    }
  },
  "tags": [
    {
      "name": "order",
      "description": "Методы отправки заказа на парсинг и получения статуса его выполнения"
    },
    {
      "name": "token",
      "description": "Методы получения информации о токене доступа и создания тестового токена"
    },
    {
      "name": "utilities",
      "description": "Утилиты для получения информации о состоянии API"
    }
  ]
}