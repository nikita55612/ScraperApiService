#![allow(warnings)]
use std::{ffi::OsString, path::Path};
use chrono::Local as LocalTime;
use rand::{seq::SliceRandom, thread_rng};
use sha1::{Sha1, Digest};


pub fn timestamp_now() -> u64 {
    LocalTime::now().timestamp() as u64
}

pub fn gen_uuid() -> String {
    uuid::Uuid::new_v4().simple().to_string()
}

pub fn gen_token_id() -> String {
    format!("ss.{}", gen_uuid())
}

pub fn sha1_hash(data: &[u8]) -> String {
    let mut hasher = Sha1::new();
    hasher.update(data);
    let res = hasher.finalize();
    hex::encode(res)
}

pub fn read_file<T: AsRef<Path>>(path: T) -> std::io::Result<String> {
    std::fs::read_to_string(path)
}

pub fn list_dir<T: AsRef<Path>>(dir: T) -> std::io::Result<Vec<OsString>> {
    Ok(
        std::fs::read_dir(dir)?
            .filter_map(|entry| entry.ok())
            .filter(|entry| entry.path().is_file())
            .map(|v| v.file_name())
            .collect::<Vec<_>>()
    )
}

pub fn select_random_product_name() -> &'static str {
    const products: [&str; 40] = [
        "Майнинг ферма домашних животных",
        "Солнцезащитный зонт с LED-подсветкой",
        "Эко-рюкзак с солнечной панелью",
        "Умные носки с GPS-трекером",
        "Карманный голографический проектор",
        "Робот-пылесос с искусственным интеллектом",
        "Многофункциональная кухонная перчатка",
        "Портативный очиститель воздуха",
        "Умная расческа с анализатором волос",
        "Bluetooth-наклейки для поиска вещей",
        "Водонепроницаемый планшет для душа",
        "Термос с встроенным измельчителем зубов",
        "Экологичный ECO+ органайзер для завтрака",
        "Умная бутылка с напоминаниями о воде",
        "Мини-телепорт для домашних растений",
        "Дрон-фотограф для селфи с зумом",
        "Умные наушники с переводчиком в комплекте",
        "Многоразовая электронная записная книжка 60 листов",
        "Портативный генератор снега",
        "Самоочищающаяся миска для домашних животных",
        "Складная электрическая доска для серфинга",
        "Aromatherapy-часы с эфирными маслами",
        "Интерактивный коврик для медитации",
        "Умная зубная щетка с AI-анализом",
        "Персональный метеорологический датчик",
        "Мягкая робо-подушка с массажем и развитием",
        "Очки с поддополненной реальностью",
        "Электронный питомец-голограмма",
        "Универсальный адаптер для зарядки мыслей",
        "Умный ошейник для домашних животных",
        "Нейро-массажёр для мозга",
        "Карманный генератор анти радуги",
        "Грибной чай с эффектом понимания",
        "Коллекционные флаконы с ароматами цивилизаций",
        "Космический гармонизатор ауры с функцией цветопередачи",
        "Музыкальная зубочистка с эквалайзером",
        "Умная вешалка с климат-контролем",
        "Самонагревающийся суп-конструктор с ложкой",
        "Пылесос ЧистоШторм согревающий душу",
        "Крем Звёздный шёпот для бровей и рук"
    ];

    products.choose(&mut thread_rng()).unwrap()
}

pub fn select_random_vendor() -> &'static str {
    const vendors: [&str; 30] = [
        "ТехноТрейд Маркет",
        "ГлобалШоп Инновации",
        "СмартСейл Экспресс",
        "АзияТех Импорт",
        "ЭкоСтиль Торг",
        "МегаБренд Сервис",
        "Ретейл Прогресс",
        "НеваТрейд Групп",
        "АльфаМаркет Решения",
        "СибирьКомерц",
        "ВысотаТорг",
        "ПремиумПродукт Альянс",
        "КонтинентТрейд",
        "УниверсалМаркет",
        "СтандартТех Импорт",
        "РегионСнаб",
        "КачествоСервис",
        "ИнтерТрейд Логистик",
        "НоваяВолна Маркет",
        "АвангардШоп",
        "МирТоваров Экспресс",
        "СтратегияТорг",
        "РесурсМаркет",
        "ТочкаРоста Трейд",
        "АтлантТех",
        "ИнновационныйСоюз",
        "КомфортТрейд",
        "МобильныйМир",
        "ГарантПродукт",
        "РазвитиеТорг"
    ];

    vendors.choose(&mut thread_rng()).unwrap()
}

pub fn select_random_brand() -> &'static str {
    const brands: [&str; 30] = [
        "Abibas",
        "КалвинКлайнер",
        "ЛуиВитончик",
        "ЮникЛоудинг",
        "ТесляМоторс",
        "Asas",
        "ЛейзСкрипучий",
        "Кока-НеКола",
        "Фэйкбук",
        "ТехноСвет",
        "АкваЛайн",
        "Gogle",
        "СнэкПро",
        "SpectraVolt",
        "FlowLuxe",
        "Quantumex",
        "Zenithon",
        "Open&AI",
        "RapidForce",
        "Мегафорс",
        "Вижионет",
        "AppleLuxe",
        "Линкорн",
        "Самсон",
        "Спектролайн",
        "СилкПро",
        "СтарГлайд",
        "Альтроника",
        "Энерджайз",
        "DiamondElysium"
    ];

    brands.choose(&mut thread_rng()).unwrap()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_list_dir() {
        println!("{:#?}", list_dir("assets"));
        assert_eq!(true, true);
    }
}
