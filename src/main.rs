mod scraper;
mod models;
mod config;
mod utils;
mod api;


// +- Сделать логирование
// +- Написать функцию теста всех систем перед запуском
// * Добавить настройку браузера в конфигурацию
// * Валидация прокси в заказе клиента
// * Валидация всего заказа клиента
// * Написать трейт валидации для структур в модуле models (validation)
// * Добавить больше API ошибок
// * Разработка стрима задачи. Очистить заказ в задаче от ненужного (оптимизация памяти для копирования)
// * Реализовать роутер приема заказа и роутер получения статуса заказа
// * Добавить к токену максимальное количество одновременных обработок
// +- Модуль роутеры поместить в папку. Добавить к модулю роутеры утилиты. Мжно разделять роутеры на версии API
// * Реализовать модуль reqwest в модуле scraper. Модуль запроса ProductData
// * Добавить создание файла конфигурации по умолчанию если его нет
// * Перенести модуль stream из модуля api в модуль scraper
// * Модуль управления сессиями браузера. users_data_dir
// * Реализовать единый модуль запросов для парсинга
// * Реализовать WebSocket для стриминга задач обработчика
// Метод API создание тестового токена
// Метод эмитации парсинга с генерацией случайных товаров
// Написать роутер парсинга идентификатора продукта из ссылки
// ProxyPool логика смены прокси в процессе парсинга
// Финишная прямая stream обработчик
// Глобальный рефакторинг кода

async fn init() {
    colog::init();
    log::info!("{:#?}\n", config::get());
    config::init();
    println!("{}", config::LOGO);
}

#[tokio::main]
async fn main() {
    init().await;
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_main_init() {
        init().await;
        assert_eq!(true, true);
    }

    #[test]
    fn test_get_var() {
        config::init();
        let var = std::env::var("MASTER_TOKEN").unwrap();
        println!("{}", var)
    }
}
